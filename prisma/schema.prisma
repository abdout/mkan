generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  MANAGER
  TENANT
}

enum Highlight {
  HighSpeedInternetAccess
  WasherDryer
  AirConditioning
  Heating
  SmokeFree
  CableReady
  SatelliteTV
  DoubleVanities
  TubShower
  Intercom
  SprinklerSystem
  RecentlyRenovated
  CloseToTransit
  GreatView
  QuietNeighborhood
}

enum Amenity {
  WasherDryer
  AirConditioning
  Dishwasher
  HighSpeedInternet
  HardwoodFloors
  WalkInClosets
  Microwave
  Refrigerator
  Pool
  Gym
  Parking
  PetsAllowed
  WiFi
}

enum PropertyType {
  Rooms
  Tinyhouse
  Apartment
  Villa
  Townhouse
  Cottage
}

enum ApplicationStatus {
  Pending
  Denied
  Approved
}

enum PaymentStatus {
  Pending
  Paid
  PartiallyPaid
  Overdue
}

// NextAuth.js Models
model User {
  id                    String                 @id @default(cuid())
  username              String?                @unique
  email                 String                 @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  isTwoFactorEnabled    Boolean                @default(false)
  lastLogin             DateTime?
  twoFactorConfirmation TwoFactorConfirmation?
  accounts              Account[]
  sessions              Session[]
  managedListings       Listing[]
  tenantProfile         Tenant?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Listing {
  id                Int          @id @default(autoincrement())
  title             String?
  description       String?
  pricePerNight     Float?
  securityDeposit   Float?
  applicationFee    Float?
  photoUrls         String[]     @default([])
  amenities         Amenity[]    @default([])
  highlights        Highlight[]  @default([])
  isPetsAllowed     Boolean      @default(false)
  isParkingIncluded Boolean      @default(false)
  bedrooms          Int?
  bathrooms         Float?
  squareFeet        Int?
  guestCount        Int          @default(2)
  propertyType      PropertyType?
  postedDate        DateTime?
  averageRating     Float?       @default(0)
  numberOfReviews   Int?         @default(0)
  draft             Boolean      @default(true)
  isPublished       Boolean      @default(false)
  instantBook       Boolean      @default(false)
  locationId        Int?
  hostId            String

  location     Location?     @relation(fields: [locationId], references: [id])
  host         User          @relation(fields: [hostId], references: [id])
  leases       Lease[]
  applications Application[]
  favoritedBy  Tenant[]      @relation("TenantFavorites")
  tenants      Tenant[]      @relation("TenantProperties")
}

model Tenant {
  id       Int    @id @default(autoincrement())
  userId   String @unique
  name     String
  email    String
  phoneNumber String

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  listings     Listing[]     @relation("TenantProperties")
  favorites    Listing[]     @relation("TenantFavorites")
  applications Application[]
  leases       Lease[]
}

model Location {
  id         Int     @id @default(autoincrement())
  address    String
  city       String
  state      String
  country    String
  postalCode String
  latitude   Float
  longitude  Float

  listings Listing[]
}

model Application {
  id              Int               @id @default(autoincrement())
  applicationDate DateTime
  status          ApplicationStatus
  propertyId      Int
  tenantId        String
  name            String
  email           String
  phoneNumber     String
  message         String?
  leaseId         Int?              @unique

  listing Listing @relation(fields: [propertyId], references: [id])
  tenant   Tenant   @relation(fields: [tenantId], references: [userId])
  lease    Lease?   @relation(fields: [leaseId], references: [id])
}

model Lease {
  id       Int      @id @default(autoincrement())
  startDate DateTime
  endDate   DateTime
  rent      Float
  deposit   Float
  propertyId Int
  tenantId   String

  listing     Listing      @relation(fields: [propertyId], references: [id])
  tenant      Tenant       @relation(fields: [tenantId], references: [userId])
  application Application?
  payments    Payment[]
}

model Payment {
  id            Int           @id @default(autoincrement())
  amountDue     Float
  amountPaid    Float
  dueDate       DateTime
  paymentDate   DateTime
  paymentStatus PaymentStatus
  leaseId       Int

  lease Lease @relation(fields: [leaseId], references: [id])
}
